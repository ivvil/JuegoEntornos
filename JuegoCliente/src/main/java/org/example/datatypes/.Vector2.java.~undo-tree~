(undo-tree-save-format-version . 1)
"e07bb443df1df8931bdc44e4862ba4e5ca83656e"
[nil nil nil nil (26168 37612 740867 583000) 0 nil]
([nil nil ((21 . 30) (#("Datatypes" 0 8 (face font-lock-constant-face fontified t) 8 9 (face font-lock-constant-face c-type c-decl-id-start fontified t)) . 21) (t . 0)) nil (26168 37612 740862 912000) 0 nil])
([nil nil ((900 . 901) (#("	" 0 1 (fontified nil)) . 899) (undo-tree-id152 . -1) (898 . 901) (t 26168 37612 749870 286000)) nil (26168 40192 636732 124000) 0 nil])
([nil nil ((901 . 912)) nil (26168 40192 636731 336000) 0 nil])
([nil nil ((apply yas--snippet-revive 908 914 #s(yas--snippet nil nil nil 72 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 72 nil nil nil nil)) (908 . 914) (#("static" 0 6 (fontified nil)) . 908) (908 . 914) (#("st" 0 2 (fontified nil)) . 908) (908 . 910) (#("static" 0 6 (fontified nil)) . -908) (908 . 914) (#("stat" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -908) (undo-tree-id149 . -4) (undo-tree-id150 . -4) (undo-tree-id151 . -4) 912) nil (26168 40192 636730 402000) 0 nil])
([nil nil ((914 . 918)) nil (26168 40192 636726 659000) 0 nil])
([nil nil ((#("Vec" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -915) (undo-tree-id146 . -3) (undo-tree-id147 . -3) (undo-tree-id148 . -3) 918) nil (26168 40192 636726 30000) 0 nil])
([nil nil ((915 . 917)) nil (26168 40192 636724 742000) 0 nil])
([nil nil ((#("C" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -915) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (#("e" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -916) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) 917) nil (26168 40192 636724 85000) 0 nil])
([nil nil ((915 . 918)) nil (26168 40192 636711 89000) 0 nil])
([nil nil ((apply yas--snippet-revive 915 922 #s(yas--snippet nil nil nil 73 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 73 nil nil nil nil)) (915 . 922) (#("Vector2" 0 7 (fontified nil)) . 915) (915 . 922) (#("V" 0 1 (fontified nil)) . 915) (915 . 916) (#("Vector2 - org.example.datatypes" 0 31 (fontified nil)) . -915) (915 . 946) (#("Vec" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -915) (undo-tree-id137 . -3) (undo-tree-id138 . -3) (undo-tree-id139 . -3) 918) nil (26168 40192 636710 392000) 0 nil])
([nil nil ((922 . 926)) nil (26168 40192 636708 828000) 0 nil])
([nil nil ((926 . 928)) nil (26168 40192 636708 528000) 0 nil])
([nil nil ((927 . 931)) nil (26168 40192 636708 178000) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-type-face fontified t)) . -930) (undo-tree-id136 . -1) 931) nil (26168 40192 636707 769000) 0 nil])
([nil nil ((930 . 931)) nil (26168 40192 636707 127000) 0 nil])
([nil nil ((apply yas--snippet-revive 927 934 #s(yas--snippet nil nil nil 74 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 74 nil nil nil nil)) (927 . 934) (#("Vector2" 0 7 (fontified nil)) . 927) (nil fontified nil 927 . 934) (nil face (rainbow-delimiters-depth-2-face) 927 . 934) (927 . 934) (#("Vect" 0 4 (fontified nil)) . 927) (nil fontified nil 927 . 931) (nil face (rainbow-delimiters-depth-2-face) 927 . 931) (927 . 931) (#("Vector2 - org.example.datatypes" 0 31 (fontified nil)) . -927) (nil fontified nil 927 . 958) (nil face (rainbow-delimiters-depth-2-face) 927 . 958) (927 . 958) (#("Vect" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face fontified t)) . -927) (undo-tree-id133 . -4) (undo-tree-id134 . -4) (undo-tree-id135 . -4) 931) nil (26168 40192 636706 93000) 0 nil])
([nil nil ((934 . 935)) nil (26168 40192 636703 719000) 0 nil])
([nil nil ((935 . 936)) nil (26168 40192 636703 411000) 0 nil])
([nil nil ((936 . 937)) nil (26168 40192 636703 10000) 0 nil])
([nil nil ((937 . 941)) nil (26168 40192 636702 705000) 0 nil])
([nil nil ((apply yas--snippet-revive 938 945 #s(yas--snippet nil nil nil 75 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 75 nil nil nil nil)) (938 . 945) (#("Vector2" 0 7 (fontified nil)) . 938) (938 . 945) (#("Ve" 0 2 (fontified nil)) . 938) (938 . 940) (#("Vector2 - org.example.datatypes" 0 31 (fontified nil)) . -938) (938 . 969) (#("Vec" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t)) . -938) (undo-tree-id130 . -3) (undo-tree-id131 . -3) (undo-tree-id132 . -3) 941) nil (26168 40192 636701 910000) 0 nil])
([nil nil ((945 . 947)) nil (26168 40192 636700 83000) 0 nil])
([nil nil ((948 . 949)) nil (26168 40192 636699 798000) 0 nil])
([nil nil ((949 . 951)) nil (26168 40192 636699 388000) 0 nil])
([nil nil ((951 . 953) (950 . 953)) nil (26168 40192 636698 874000) 0 nil])
([nil nil ((953 . 956)) nil (26168 40192 636698 487000) 0 nil])
([nil nil ((apply yas--snippet-revive 953 959 #s(yas--snippet nil nil nil 76 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 76 nil nil nil nil)) (953 . 959) (#("return" 0 6 (fontified nil)) . 953) (953 . 959) (#("ret" 0 3 (fontified nil)) . 953) (953 . 956) (#("return" 0 6 (fontified nil)) . -953) (953 . 959) (#("ret" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -953) (undo-tree-id127 . -3) (undo-tree-id128 . -3) (undo-tree-id129 . -3) 956) nil (26168 40192 636697 565000) 0 nil])
([nil nil ((959 . 964)) nil (26168 40192 636693 622000) 0 nil])
([nil nil ((apply yas--snippet-revive 964 973 #s(yas--snippet nil nil nil 77 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 77 nil nil nil nil)) (964 . 973) (#("Vector2()" 0 9 (fontified nil)) . 964) (964 . 973) (#("Vector2()" 0 9 (fontified nil)) . -964) (964 . 973)) nil (26168 40192 636693 201000) 0 nil])
([nil nil ((972 . 974)) nil (26168 40192 636692 559000) 0 nil])
([nil nil ((apply yas--snippet-revive 974 975 #s(yas--snippet nil nil nil 78 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 78 nil nil nil nil)) (974 . 975) (#("x" 0 1 (fontified nil)) . 974) (974 . 975) (#("x : double" 0 10 (fontified nil)) . -974) (974 . 984)) nil (26168 40192 636691 971000) 0 nil])
([nil nil ((975 . 979)) nil (26168 40192 636691 294000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -978) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) 979) nil (26168 40192 636690 691000) 0 nil])
([nil nil ((978 . 982)) nil (26168 40192 636689 401000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -981) (undo-tree-id123 . -1) 982) nil (26168 40192 636688 997000) 0 nil])
([nil nil ((981 . 982)) nil (26168 40192 636688 379000) 0 nil])
([nil nil ((982 . 983)) nil (26168 40192 636688 93000) 0 nil])
([nil nil ((983 . 984)) nil (26168 40192 636687 434000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -983) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) 984) nil (26168 40192 636686 995000) 0 nil])
([nil nil ((983 . 986)) nil (26168 40192 636685 156000) 0 nil])
([nil nil ((986 . 987)) nil (26168 40192 636684 795000) 0 nil])
([nil nil ((987 . 988)) nil (26168 40192 636684 307000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -986) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (#(" " 0 1 (fontified t)) . -987) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) 988) nil (26168 40192 636681 697000) 0 nil])
([nil nil ((986 . 991)) nil (26168 40192 636343 515000) 0 nil])
([nil nil ((988 . 989)) nil (26168 40192 636342 930000) 0 nil])
([nil nil ((993 . 994)) nil (26168 40192 636338 962000) 0 nil])
([nil nil ((999 . 1000) (#("	" 0 1 (fontified nil)) . 998) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (997 . 1000) (t 26168 40192 654118 814000)) nil (26168 40300 225503 9000) 0 nil])
([nil nil ((1000 . 1004)) nil (26168 40300 225496 778000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t)) . -1002) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (#("l" 0 1 (fontified nil)) . -1003) 1004) nil (26168 40300 225496 18000) 0 nil])
([nil nil ((1002 . 1020)) nil (26168 40300 225487 40000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -1019) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) 1020) nil (26168 40300 225486 123000) 0 nil])
([nil nil ((1019 . 1022)) nil (26168 40300 225458 610000) 0 nil])
([nil nil ((1022 . 1024)) nil (26168 40300 225458 390000) 0 nil])
([nil nil ((1023 . 1027)) nil (26168 40300 225458 147000) 0 nil])
([nil nil ((apply yas--snippet-revive 1023 1030 #s(yas--snippet nil nil nil 79 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 79 nil nil nil nil)) (1023 . 1030) (#("Vector2" 0 7 (fontified nil)) . 1023) (1023 . 1030) (#("Vect" 0 4 (fontified nil)) . 1023) (1023 . 1027) (#("Vector2 - org.example.datatypes" 0 31 (fontified nil)) . -1023) (1023 . 1054) (#("Vect" 0 1 (fontified t) 1 2 (fontified t) 2 4 (fontified t)) . -1023) (undo-tree-id496 . -4) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -2) (undo-tree-id507 . -2) (undo-tree-id508 . -2) (undo-tree-id509 . -2) (undo-tree-id510 . -2) (undo-tree-id511 . -2) (undo-tree-id512 . -2) (undo-tree-id513 . -2) (undo-tree-id514 . -2) (undo-tree-id515 . -2) (undo-tree-id516 . -2) (undo-tree-id517 . -2) (undo-tree-id518 . -2) (undo-tree-id519 . -2) (undo-tree-id520 . -2) (undo-tree-id521 . -2) (undo-tree-id522 . -2) (undo-tree-id523 . -4) (undo-tree-id524 . -4) (undo-tree-id525 . -4) (undo-tree-id526 . -4) (undo-tree-id527 . -4) (undo-tree-id528 . -4) (undo-tree-id529 . -4) (undo-tree-id530 . -4) (undo-tree-id531 . -4) (undo-tree-id532 . -4) (undo-tree-id533 . -4) (undo-tree-id534 . -4) (undo-tree-id535 . -4) (undo-tree-id536 . -4) (undo-tree-id537 . -4) (undo-tree-id538 . -4) (undo-tree-id539 . -4) (undo-tree-id540 . -4) (undo-tree-id541 . -4) (undo-tree-id542 . -4) (undo-tree-id543 . -4) (undo-tree-id544 . -4) (undo-tree-id545 . -4) (undo-tree-id546 . -4) (undo-tree-id547 . -4) (undo-tree-id548 . -4) (undo-tree-id549 . -4) (undo-tree-id550 . -4) (undo-tree-id551 . -4) (undo-tree-id552 . -4) (undo-tree-id553 . -4) (undo-tree-id554 . -4) (undo-tree-id555 . -4) (undo-tree-id556 . -4) (undo-tree-id557 . -4) (undo-tree-id558 . -4) (undo-tree-id559 . -4) (undo-tree-id560 . -4) (undo-tree-id561 . -4) (undo-tree-id562 . -4) (undo-tree-id563 . -4) (undo-tree-id564 . -4) (undo-tree-id565 . -4) (undo-tree-id566 . -4) (undo-tree-id567 . -4) (undo-tree-id568 . -4) (undo-tree-id569 . -4) (undo-tree-id570 . -4) (undo-tree-id571 . -4) (undo-tree-id572 . -4) (undo-tree-id573 . -4) (undo-tree-id574 . -4) (undo-tree-id575 . -4) (undo-tree-id576 . -4) (undo-tree-id577 . -4) (undo-tree-id578 . -4) (undo-tree-id579 . -4) 1027) nil (26168 40300 225456 509000) 0 nil])
([nil nil ((1030 . 1032)) nil (26168 40300 225425 914000) 0 nil])
([nil nil ((1033 . 1034)) nil (26168 40300 225425 708000) 0 nil])
([nil nil ((1034 . 1036)) nil (26168 40300 225425 423000) 0 nil])
([nil nil ((1036 . 1038) (1035 . 1038)) nil (26168 40300 225425 121000) 0 nil])
([nil nil ((1038 . 1041)) nil (26168 40300 225424 795000) 0 nil])
([nil nil ((apply yas--snippet-revive 1038 1044 #s(yas--snippet nil nil nil 80 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 80 nil nil nil nil)) (1038 . 1044) (#("return" 0 6 (fontified nil)) . 1038) (1038 . 1044) (#("ret" 0 3 (fontified nil)) . 1038) (1038 . 1041) (#("return" 0 6 (fontified nil)) . -1038) (1038 . 1044) (#("ret" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -1038) (undo-tree-id421 . -3) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -2) (undo-tree-id432 . -2) (undo-tree-id433 . -2) (undo-tree-id434 . -2) (undo-tree-id435 . -2) (undo-tree-id436 . -2) (undo-tree-id437 . -2) (undo-tree-id438 . -2) (undo-tree-id439 . -3) (undo-tree-id440 . -3) (undo-tree-id441 . -3) (undo-tree-id442 . -3) (undo-tree-id443 . -3) (undo-tree-id444 . -3) (undo-tree-id445 . -3) (undo-tree-id446 . -3) (undo-tree-id447 . -3) (undo-tree-id448 . -3) (undo-tree-id449 . -3) (undo-tree-id450 . -3) (undo-tree-id451 . -3) (undo-tree-id452 . -3) (undo-tree-id453 . -3) (undo-tree-id454 . -3) (undo-tree-id455 . -3) (undo-tree-id456 . -3) (undo-tree-id457 . -3) (undo-tree-id458 . -3) (undo-tree-id459 . -3) (undo-tree-id460 . -3) (undo-tree-id461 . -3) (undo-tree-id462 . -3) (undo-tree-id463 . -3) (undo-tree-id464 . -3) (undo-tree-id465 . -3) (undo-tree-id466 . -3) (undo-tree-id467 . -3) (undo-tree-id468 . -3) (undo-tree-id469 . -3) (undo-tree-id470 . -3) (undo-tree-id471 . -3) (undo-tree-id472 . -3) (undo-tree-id473 . -3) (undo-tree-id474 . -3) (undo-tree-id475 . -3) (undo-tree-id476 . -3) (undo-tree-id477 . -3) (undo-tree-id478 . -3) (undo-tree-id479 . -3) (undo-tree-id480 . -3) (undo-tree-id481 . -3) (undo-tree-id482 . -3) (undo-tree-id483 . -3) (undo-tree-id484 . -3) (undo-tree-id485 . -3) (undo-tree-id486 . -3) (undo-tree-id487 . -3) (undo-tree-id488 . -3) (undo-tree-id489 . -3) (undo-tree-id490 . -3) (undo-tree-id491 . -3) (undo-tree-id492 . -3) (undo-tree-id493 . -3) (undo-tree-id494 . -3) (undo-tree-id495 . -3) 1041) nil (26168 40300 225423 106000) 0 nil])
([nil nil ((1013 . 1014)) nil (26168 40300 225386 730000) 0 nil])
([nil nil ((1013 . 1017)) nil (26168 40300 225386 392000) 0 nil])
([nil nil ((apply yas--snippet-revive 1014 1020 #s(yas--snippet nil nil nil 81 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 81 nil nil nil nil)) (1014 . 1020) (#("Point2" 0 6 (fontified nil)) . 1014) (1014 . 1020) (#("poi" 0 3 (fontified nil)) . 1014) (1014 . 1017) (#("Point2 - org.example.datatypes" 0 30 (fontified nil)) . -1014) (1014 . 1044) (#("poi" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -1014) (undo-tree-id337 . -3) (undo-tree-id338 . -2) (undo-tree-id339 . -2) (undo-tree-id340 . -2) (undo-tree-id341 . -2) (undo-tree-id342 . -2) (undo-tree-id343 . -2) (undo-tree-id344 . -2) (undo-tree-id345 . -2) (undo-tree-id346 . -2) (undo-tree-id347 . -2) (undo-tree-id348 . -2) (undo-tree-id349 . -2) (undo-tree-id350 . -2) (undo-tree-id351 . -2) (undo-tree-id352 . -2) (undo-tree-id353 . -2) (undo-tree-id354 . -2) (undo-tree-id355 . -2) (undo-tree-id356 . -2) (undo-tree-id357 . -2) (undo-tree-id358 . -2) (undo-tree-id359 . -2) (undo-tree-id360 . -2) (undo-tree-id361 . -2) (undo-tree-id362 . -2) (undo-tree-id363 . -2) (undo-tree-id364 . -2) (undo-tree-id365 . -3) (undo-tree-id366 . -3) (undo-tree-id367 . -3) (undo-tree-id368 . -3) (undo-tree-id369 . -3) (undo-tree-id370 . -3) (undo-tree-id371 . -3) (undo-tree-id372 . -3) (undo-tree-id373 . -3) (undo-tree-id374 . -3) (undo-tree-id375 . -3) (undo-tree-id376 . -3) (undo-tree-id377 . -3) (undo-tree-id378 . -3) (undo-tree-id379 . -3) (undo-tree-id380 . -3) (undo-tree-id381 . -3) (undo-tree-id382 . -3) (undo-tree-id383 . -3) (undo-tree-id384 . -3) (undo-tree-id385 . -3) (undo-tree-id386 . -3) (undo-tree-id387 . -3) (undo-tree-id388 . -3) (undo-tree-id389 . -3) (undo-tree-id390 . -3) (undo-tree-id391 . -3) (undo-tree-id392 . -3) (undo-tree-id393 . -3) (undo-tree-id394 . -3) (undo-tree-id395 . -3) (undo-tree-id396 . -3) (undo-tree-id397 . -3) (undo-tree-id398 . -3) (undo-tree-id399 . -3) (undo-tree-id400 . -3) (undo-tree-id401 . -3) (undo-tree-id402 . -3) (undo-tree-id403 . -3) (undo-tree-id404 . -3) (undo-tree-id405 . -3) (undo-tree-id406 . -3) (undo-tree-id407 . -3) (undo-tree-id408 . -3) (undo-tree-id409 . -3) (undo-tree-id410 . -3) (undo-tree-id411 . -3) (undo-tree-id412 . -3) (undo-tree-id413 . -3) (undo-tree-id414 . -3) (undo-tree-id415 . -3) (undo-tree-id416 . -3) (undo-tree-id417 . -3) (undo-tree-id418 . -3) (undo-tree-id419 . -3) (undo-tree-id420 . -3) 1017) nil (26168 40300 225384 551000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1020) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) 1021) nil (26168 40300 225212 171000) 0 nil])
([nil nil ((1051 . 1052)) nil (26168 40300 222160 144000) 0 nil])
([nil nil ((1052 . 1058)) nil (26168 40300 222159 795000) 0 nil])
([nil nil ((apply yas--snippet-revive 1056 1064 #s(yas--snippet nil nil nil 82 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 82 nil nil nil nil)) (1056 . 1064) (#("Point2()" 0 8 (fontified nil)) . 1056) (1056 . 1064) (#("Po" 0 2 (fontified nil)) . 1056) (1056 . 1058) (#("Point2()" 0 8 (fontified nil)) . -1056) (1056 . 1064) (#("Po" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t)) . -1056) (undo-tree-id239 . -2) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -2) (undo-tree-id257 . -2) (undo-tree-id258 . -2) (undo-tree-id259 . -2) (undo-tree-id260 . -2) (undo-tree-id261 . -2) (undo-tree-id262 . -2) (undo-tree-id263 . -2) (undo-tree-id264 . -2) (undo-tree-id265 . -2) (undo-tree-id266 . -2) (undo-tree-id267 . -2) (undo-tree-id268 . -2) (undo-tree-id269 . -2) (undo-tree-id270 . -2) (undo-tree-id271 . -2) (undo-tree-id272 . -2) (undo-tree-id273 . -2) (undo-tree-id274 . -2) (undo-tree-id275 . -2) (undo-tree-id276 . -2) (undo-tree-id277 . -2) (undo-tree-id278 . -2) (undo-tree-id279 . -2) (undo-tree-id280 . -2) (undo-tree-id281 . -2) (undo-tree-id282 . -2) (undo-tree-id283 . -2) (undo-tree-id284 . -2) (undo-tree-id285 . -2) (undo-tree-id286 . -2) (undo-tree-id287 . -2) (undo-tree-id288 . -2) (undo-tree-id289 . -2) (undo-tree-id290 . -2) (undo-tree-id291 . -2) (undo-tree-id292 . -2) (undo-tree-id293 . -2) (undo-tree-id294 . -2) (undo-tree-id295 . -2) (undo-tree-id296 . -2) (undo-tree-id297 . -2) (undo-tree-id298 . -2) (undo-tree-id299 . -2) 1058) nil (26168 40300 222158 487000) 0 nil])
([nil nil ((1063 . 1067)) nil (26168 40300 222136 323000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1066) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) 1067) nil (26168 40300 222135 756000) 0 nil])
([nil nil ((1066 . 1067)) nil (26168 40300 222128 919000) 0 nil])
([nil nil ((1067 . 1068)) nil (26168 40300 222128 647000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1066) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (#("," 0 1 (fontified t)) . -1067) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) 1068) nil (26168 40300 222127 221000) 0 nil])
([nil nil ((1066 . 1067)) nil (26168 40300 222099 294000) 0 nil])
([nil nil ((1067 . 1071)) nil (26168 40300 222098 794000) 0 nil])
([nil current ((1072 . 1073)) nil (26168 40300 222094 983000) 0 nil])
nil
